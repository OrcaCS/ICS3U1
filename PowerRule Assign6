import java.util.Scanner;
 
 public class PowerRule {
     public static void main(String[] args) throws Exception {
         Scanner keyboard = new Scanner(System.in);
         String function = "f(x) = ";
         double sum = 0.0;
         
         System.out.println("\nEnter the coefficients:");
         String coefficients = keyboard.nextLine();
         System.out.println("\nEnter the exponents:");
         String exponents = keyboard.nextLine();
         keyboard.close();
 
         String[] coeffSt = coefficients.split(" ");
         String[] expSt = exponents.split(" ");
         
         System.out.print("\nYour first derivative is: f'(x) = ");
 
         for (int i = 0; i < coeffSt.length; i++) {
             double coefficient = Double.parseDouble(coeffSt[i]);
             int exponent = Integer.parseInt(expSt[i]);
             String first;
             
             if (exponent == 1) { // if exponent is 1
                 first = (coefficient == (int) coefficient) // variable first. if coefficient is whole number:
                    ? ((i == 0) ? (int) coefficient + " " : (coefficient > 0 ? "+" : "") + (int) coefficient + " ") // if first section, print whole coefficient, add space (do nothing). else if is not first section: if coefficient is positive, print "+" else print nothing (operator), then print whole coefficient, add space.
                    : ((i == 0) ? coefficient + " " : (coefficient > 0 ? "+" : "") + coefficient + " "); // if first section, print coefficient, add space (do nothing). else if is not first section: if coefficient is positive, print "+" else print nothing (operator), then print coefficient, add space.
             } else { // if exponent is not 0
                 first = (coefficient == (int) coefficient) // variable first. if coefficient is whole number.
                    ? ((i == 0) ? (int) coefficient * exponent + "x^" + (exponent - 1) + " " : (coefficient > 0 ? "+" : "") + (int) coefficient * exponent + "x^" + (exponent - 1) + " ") // if first section, print multiply coeff with exp. add exponent, add space. else if is not first section: if coefficient is positive, print "+" else print nothing (operator), then multiply coeff with exp. add exponent, add space.
                    : ((i == 0) ? coefficient * exponent + "x^" + (exponent - 1) + " " : (coefficient > 0 ? "+" : "") + coefficient * exponent + "x^" + (exponent - 1) + " "); // if first section, print multiply coeff with exp. add exponent, add space. else if is not first section: if coefficient is positive, print "+" else print nothing (operator), then multiply coeff with exp. add exponent, add space.
             }
             System.out.print(first);
             
         }
             
        System.out.print("\nYour second derivative is: f'(x) = ");
             
        for (int i = 0; i < coeffSt.length; i++) {
            double coefficient = Double.parseDouble(coeffSt[i]);
             int exponent = Integer.parseInt(expSt[i]);
            double newCoefficient = coefficient * exponent;
             int newExponent = exponent - 1;
             String second;
            
            if (newExponent == 0) {
            second = "";
            } else
            if (newExponent == 1) { // if exponent is 1
                 second = (newCoefficient == (int) newCoefficient) // variable first. if coefficient is whole number:
                    ? ((i == 0) ? (int) newCoefficient + " " : (newCoefficient > 0 ? "+" : "") + (int) newCoefficient + " ") // if first section, print whole coefficient, add space (do nothing). else if is not first section: if coefficient is positive, print "+" else print nothing (operator), then print whole coefficient, add space.
                    : ((i == 0) ? newCoefficient + " " : (newCoefficient > 0 ? "+" : "") + newCoefficient + " "); // if first section, print coefficient, add space (do nothing). else if is not first section: if coefficient is positive, print "+" else print nothing (operator), then print coefficient, add space.
             } else { // if exponent is not 0
                 second = (newCoefficient == (int) newCoefficient) // variable first. if coefficient is whole number.
                    ? ((i == 0) ? (int) newCoefficient * newExponent + "x^" + (newExponent - 1) + " " : (newCoefficient > 0 ? "+" : "") + (int) newCoefficient * newExponent + "x^" + (newExponent - 1) + " ") // if first section, print multiply coeff with exp. add exponent, add space. else if is not first section: if coefficient is positive, print "+" else print nothing (operator), then multiply coeff with exp. add exponent, add space.
                    : ((i == 0) ? newCoefficient * newExponent + "x^" + (newExponent - 1) + " " : (newCoefficient > 0 ? "+" : "") + newCoefficient * newExponent + "x^" + (newExponent - 1) + " "); // if first section, print multiply coeff with exp. add exponent, add space. else if is not first section: if coefficient is positive, print "+" else print nothing (operator), then multiply coeff with exp. add exponent, add space.
             }
             System.out.print(second);
        }
     }
 }
